<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[2017-11-28-Vue的多套环境发布脚本]]></title>
      <url>/2017/11/28/2017-11-28-Vue%E7%9A%84%E5%A4%9A%E5%A5%97%E7%8E%AF%E5%A2%83%E5%8F%91%E5%B8%83%E8%84%9A%E6%9C%AC/</url>
      <content type="html"><![CDATA[<h2 id="需求来源"><a href="#需求来源" class="headerlink" title="需求来源"></a>需求来源</h2><p>项目需要部署多套环境来发布（测试、生产），对于项目而言目前只有代码中后台接口地址不同，要求项目在build的时候能根据需要build成不同后台接口的版本去发布，目前咱在项目里用到的是一种最简单的办法，针对不同的build需求，写不同的build脚本，以达到build出不同版本的目的。</p>
<h2 id="在Vue项目里具体的实现"><a href="#在Vue项目里具体的实现" class="headerlink" title="在Vue项目里具体的实现"></a>在Vue项目里具体的实现</h2><p>Vue项目用过<code>package.json</code>这个文件来定义一组npm脚本：</p>
<pre><code class="Json">&quot;scripts&quot;: {
  &quot;dev&quot;: &quot;node build/dev-server.js&quot;,
  &quot;start&quot;: &quot;node build/dev-server.js&quot;,
  &quot;build&quot;: &quot;node build/build.js&quot;,
  &quot;unit&quot;: &quot;cross-env BABEL_ENV=test karma startest/unit/karma.conf.js --single-run&quot;,
  &quot;e2e&quot;: &quot;node test/e2e/runner.js&quot;,
  &quot;test&quot;: &quot;npm run unit &amp;&amp; npm run e2e&quot;,
  &quot;lint&quot;: &quot;eslint --ext .js,.vue srtest/unit/specs test/e2e/specs&quot;
},
</code></pre>
<p>该<code>scripts</code>字段定义了7个脚本，可以通过<code>npm run build</code>的方式来运行<code>node build/build.js</code>这个部分，nodejs支持从环境变量中读取指定变量的值，关于这点在node命令行下也可以直接体现，通过<code>process.env</code>可以得到类似如下的结果：</p>
<pre><code>╰$ node
&gt; process.env
{ 
  COLORFGBG: &#39;15;0&#39;,
  ITERM_PROFILE: &#39;natas&#39;,
  XPC_FLAGS: &#39;0x0&#39;,
  LANG: &#39;zh_CN.UTF-8&#39;,
  SHELL: &#39;/bin/zsh&#39;
}
</code></pre><p>那么开头提到的需求的具体的实现就很简单了，在bash脚本里设置环境变量，在build脚本运行时读取环境变量的值作为build运行时的值，build出符合需求的版本。</p>
<p>具体的代码如下</p>
<h3 id="文件列表"><a href="#文件列表" class="headerlink" title="文件列表"></a>文件列表</h3><ul>
<li>build_for_test.sh</li>
<li>conf/prod.env.js</li>
<li>src/api/api.js</li>
</ul>
<h4 id="build-for-test-sh"><a href="#build-for-test-sh" class="headerlink" title="build_for_test.sh"></a>build_for_test.sh</h4><pre><code>#!/bin/bash
mkdir nginx_web
# set nodeJs ENV
export NODE_ENV_API_ROOT=&quot;http://x.x.x.x:8000/panelApi/v1&quot;
export NODE_ENV_NAME=&quot;test&quot;

echo &quot;Build for test env&quot;
echo &quot;NODE_ENV_API_ROOT=&quot;${NODE_ENV_API_ROOT}
echo &quot;NODE_ENV_NAME=&quot;${NODE_ENV_NAME}

# re build
npm run build &amp;&amp; cp -R dist/* nginx_web/ &amp;&amp; chmod -R 755 nginx_web
</code></pre><h4 id="conf-prod-env-js"><a href="#conf-prod-env-js" class="headerlink" title="conf/prod.env.js"></a>conf/prod.env.js</h4><pre><code class="nodejs">exports.exports = {
  NODE_ENV: &#39;&quot;&#39; + process.env.NODE_ENV_NAME + &#39;&quot;&#39;,
  API_ROOT: &#39;&quot;&#39; + process.env.NODE_ENV_API_ROOT + &#39;&quot;&#39;
}
</code></pre>
<h4 id="src-api-api-js"><a href="#src-api-api-js" class="headerlink" title="src/api/api.js"></a>src/api/api.js</h4><pre><code>let baseUrl = process.env.API_ROOT
console.log(&#39;baseUrl&#39;, baseUrl)
export let axiosIns = axios.create({
  baseURL: baseUrl
})
</code></pre><p>这样一来，在运行<code>build_for_test.sh</code>时，环境变量<code>NODE_ENV_API_ROOT</code>被设置为期望的值，在build的过程中，<code>require(&#39;conf/prod.env.js&#39;)</code>时可以从<code>process.env.NODE_ENV_API_ROOT</code>中获取到环境变量的值，build完成后发布的版本中，<code>src/api/api.js</code>文件里的<code>baseUrl</code>值便可以从<code>process.env.API_ROOT</code>中获取到。</p>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
            <tag> nodejs </tag>
            
            <tag> Bash </tag>
            
            <tag> 前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[python用队列实现多线程间的通信]]></title>
      <url>/2017/01/03/2017-01-03-python%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<p>在写Python网络爬虫的时候，因为网络延迟的问题，单线程的爬虫效率往往不尽人意，最简单的办法是使用多线程，并发地去发送请求，多线程间的通信也是挺有意思的，下面是自己写的一段练习的代码</p>
<pre><code class="Python"># coding:utf-8
import Queue
import threading
import time
import random

q = Queue.Queue()  # 线程间通信的队列
quit_flage = False  # 一个全局变量，标记程序是否该退出了

pq = Queue.Queue()  # 用来存放print需要输出的消息


# 模拟工作线程
def worker(id):
    while not (quit_flage and q.empty()):  # 当队列为空且退出标记为True时结束循环
        time.sleep(random.random())  # 暂停一个随机的时间
        try:
            item = q.get(True, 0.1)  # 从队列中取出一个元素，最多阻塞0.1秒
        except Queue.Empty:  # 队列空，进入下一个循环
            continue
        que_print(&#39;%s get %s&#39; % (id, item))
        q.task_done()  # 队列任务计数器减一，和join()函数对应
    que_print(&#39;%s stop&#39; % id)


# 向队列q中加入元素
def add_item(item):
    q.put(item)


# 向打印队列加入消息，用来print
def que_print(msg):
    pq.put(msg)


# 从打印队列中取出待打印的消息
def que_print_thread():
    print &#39;start pq&#39;
    while not (quit_flage and pq.empty()):  # 当队列为空且退出标记为True时结束循环
        try:
            msg = pq.get(True, 0.1)  # 从队列中取出一个元素，最多阻塞0.1秒
        except Queue.Empty:  # 队列空，进入下一个循环
            continue
        print msg


[add_item(i) for i in &#39;qwertyuiopasdfghjkl&#39;]  # 向队列中加些东西

[threading.Thread(target=worker, kwargs={&#39;id&#39;: i}).start() for i in range(5)]  # 开启5个woker线程
threading.Thread(target=que_print_thread).start()  # 开启print队列
print &#39;wating job...&#39;
q.join()  # 和task_done()对应，阻塞，直到队列中的任务计数器归零，计数器在put()后+1，和task_done()后-1
print &#39;job finished&#39;
quit_flage = True  # 设置退出标记为True，各个线程会在标记为True的时候退出
</code></pre>
<p>程序运行结果</p>
<pre><code>wating job...
start pq

1 get q
4 get w
3 get e
4 get r
2 get t
1 get y
0 get u
3 get i
2 get o
1 get p
4 get a
4 get s
3 get d
3 get f
0 get g
4 get h
1 get j
2 get k
job finished
1 get l

Process finished with exit code 0
</code></pre><p>程序中为什么要加一个打印队列呢？因为因为多线程同时向stdout输出信息的话，信息流看起来会是下面这个样子，所以还是写了一个用来输出消息的队列。</p>
<pre><code>start pq
wating job...

1 get q
1 get w
4 get e3 get r
0 get t
2 get y2 get u
 4 get i
2 get o
1 get p
1 get a
4 get s0 get d
3 get f
0 get g
1 get h2 get j
2 get k
2 get l
job finished

Process finished with exit code 0
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用supervisor来管理tcptun的多个策略]]></title>
      <url>/2016/12/28/2016-12-28-%E7%94%A8supervisor%E6%9D%A5%E7%AE%A1%E7%90%86tcptun%E7%9A%84%E5%A4%9A%E4%B8%AA%E7%AD%96%E7%95%A5/</url>
      <content type="html"></content>
      
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> supervisor </tag>
            
            <tag> tcptun </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[终端下来自FBI的问候]]></title>
      <url>/2016/11/22/2016-11-22-%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%9D%A5%E8%87%AAFBI%E7%9A%84%E9%97%AE%E5%80%99/</url>
      <content type="html"><![CDATA[<p>先上效果图</p>
<img src="/2016/11/22/2016-11-22-终端下来自FBI的问候/fbi_warning01.png" title="resImghere">
<p>在猥琐同学的启发下，打算把爱情动作大片的片头放到终端的字符界面下，233，便简单写了一个bash脚本，放到<code>~/.zshrc</code>里面便可，每次打开终端都会显示出来一个<code>FBI WARNING</code>，哈哈。</p>
<h3 id="附上代码"><a href="#附上代码" class="headerlink" title="附上代码"></a>附上代码</h3><pre><code class="Bash">    function bash_center_print {
        strlen=${#1}
        blanklen=$(((COLUMNS - strlen) / 2))
        echo &quot;$(tput cuf $blanklen) $1&quot;
    }

    function bash_center_print_red {
        strlen=${#1}
        blanklen=$(((COLUMNS - strlen) / 2))
        echo &quot;$(tput cuf $blanklen) $(tput setab 1)$1$(tput sgr 0)&quot;
    }

    bash_center_print_red &quot;FBI WARNING&quot;
    echo &quot;&quot;
    bash_center_print &quot;Federal Law provides severe civil and criminal penalties for &quot;
    bash_center_print &quot;the unauthorized reproduction, distribution, or exhibition of&quot;
    bash_center_print &quot;copyrighted motion pictures (Title 17, United States Code,   &quot;
    bash_center_print &quot;Sections 501 and 508). The Federal Bureau of Investigation   &quot;
    bash_center_print &quot;investigates allegations of criminal copyright infringement  &quot;
    bash_center_print &quot;(Title 17, United States Code, Section 506).&quot;
</code></pre>
<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>其中用<code>COLUMNS</code>来获取到字符终端的宽度，计算一下居中的留白部分长度，用<code>tput cuf</code>来实现居中，关于<code>FBI WARNING</code>那一行用红色背景打印用到了<code>tput setab</code>来设置了背景色。</p>
<p>Github <a href="https://github.com/zhaohui8969/FBI_WARNING" target="_blank" rel="noopener">https://github.com/zhaohui8969/FBI_WARNING</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 恶搞 </tag>
            
            <tag> bash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何用Python快速撸出一个贴吧图片下载器]]></title>
      <url>/2016/04/23/2016-04-23-%E5%A6%82%E4%BD%95%E7%94%A8Python%E5%BF%AB%E9%80%9F%E6%92%B8%E5%87%BA%E4%B8%80%E4%B8%AA%E8%B4%B4%E5%90%A7%E5%9B%BE%E7%89%87%E4%B8%8B%E8%BD%BD%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>这是一篇关于自己写贴吧图片下载器的总结。<br>　<br>起初是室友说要做一个贴吧的信息收集爬虫，于是打算先从简单一点的开始，先做一个贴吧的图片下载吧，之后再把获取图片改成获取背的内容不就好了嘛😄，然后就开始写了这个爬虫。现在这个Python脚本主要用到了下面的一些东西。
　    </p>
<h3 id="用到的Python模块"><a href="#用到的Python模块" class="headerlink" title="用到的Python模块"></a>用到的Python模块</h3><ul>
<li>requests（Python下的HTTP客户端实现）</li>
<li>BeautifulSoup（一个很方便的html语法分析工具）</li>
<li>colorama（在控制台输出彩色的</li>
<li>threading（我用到了多线程的一些东西）</li>
<li>signal（Python下和信号相关的东西）</li>
<li>OptionParser（很方便的命令行参数配置工具）</li>
<li>threadpool（一个菊苣写的Python线程池实现）</li>
</ul>
<h3 id="原理的部分"><a href="#原理的部分" class="headerlink" title="原理的部分"></a>原理的部分</h3><p>其实思路很简单，随便找一个帖子，比如这个<a href="http://tieba.baidu.com/p/2545680017" target="_blank" rel="noopener">http://tieba.baidu.com/p/2545680017</a>，这是一个图楼，然后就需要分析页面的HTM代码内容，我用的是Chrome浏览器，那就右键选择一个楼层的图片，<code>审查元素</code>，然后发现HTML代码中是这样写的：
　    </p>
<pre><code class="HTML">&lt;img class=&quot;BDE_Image&quot; src=&quot;http://imgsrc.baidu.com/forum/w%3D580/sign=198d73cadc54564ee565e43183dc9cde/857f1f1f95cad1c8f75fb3fe7e3e6709c83d5130.jpg&quot; pic_ext=&quot;jpeg&quot; width=&quot;550&quot; height=&quot;600&quot;&gt;
</code></pre>
<p>　<br>可以看到里面<code>src</code>部分直接是图片的地址，再观察楼层图片和其他无关紧要的图片（比如层主头像、签名档）的写法区别，发现楼层图片都会有一个<code>BDE_Image</code>class，那么这就好办了，等会直接筛选出来就好。</p>
<p>然后翻到帖子的第二页，发现URL变成了<a href="http://tieba.baidu.com/p/2545680017?pn=2" target="_blank" rel="noopener">http://tieba.baidu.com/p/2545680017?pn=2</a>，多了一个<code>?pn=2</code>，这个<code>pn</code>参数也就表示了当前查看的页数位置，那么我们只需要知道帖子总共有多少页，对<code>pn</code>做一个遍历就可以获得一个帖子中所有页面了，现在需要知道怎么获取帖子的总页面数。直接来到帖子的最底部，看到了这样的内容<code>62回复贴，共3页</code>，对应的HTML代码为：
　    </p>
<pre><code class="HTML">&lt;li class=&quot;l_reply_num&quot; style=&quot;margin-left:8px&quot;&gt;&lt;span class=&quot;red&quot; style=&quot;margin-right:3px&quot;&gt;62&lt;/span&gt;回复贴，共&lt;span class=&quot;red&quot;&gt;3&lt;/span&gt;页&lt;/li&gt;
</code></pre>
<p>　<br>特征很明显，有一个叫做<code>l_reply_num</code>的class，总回帖数和总页数都各用一个sapn标签包起来了，等会直接过滤出来就可以。</p>
<p>现在对网页部分的分析算是结束了，到了代码实现的部分了。</p>
<h3 id="这里贴出部分代码"><a href="#这里贴出部分代码" class="headerlink" title="这里贴出部分代码"></a>这里贴出部分代码</h3><pre><code class="Python"># 用requests模块直接获取网页的HTML内容
getparams = {&#39;pn&#39;: 1}
result_ = requests.get(&#39;http://tieba.baidu.com/p/2545680017?&#39;, params=getparams).content
</code></pre>
<pre><code class="Python"># 用BeautifulSoup模块做HTML内容的分析，获取总页数
soup = BeautifulSoup(result_, &#39;lxml&#39;)
page_list = soup.find(&#39;li&#39;, attrs={&#39;class&#39;: &#39;l_reply_num&#39;})
max_page_number = int(page_list.contents[2].string)  # 总页数
</code></pre>
<pre><code class="Python"># 在pn处做一个遍历，获取到帖子的所有页面
for pageNum in range(start, end):
    getparams = {&#39;pn&#39;: pageNum}
    html_cont = requests.get(self.pURL, params=getparams).content
    soup = BeautifulSoup(html_cont, &#39;lxml&#39;)
    # 用BeautifulSoup模块做HTML内容的分析，获取到所有楼层图片的下载地址
    # 并发送到下载队列
    for item in soup.findAll(&#39;img&#39;, attrs={&#39;class&#39;: &quot;BDE_Image&quot;}):
        srcurl = item.get(&#39;src&#39;)  # 图片地址
        if not self._is_Exit:
            self.downloader.add_task(srcurl)
</code></pre>
<pre><code class="Python"># 下载器里用threadpool模块做多线程的并发下载，这样速度比单线程快很多
def add_task(self, url):
    with self.lock:
        self._is_alive = True
    reqs = threadpool.makeRequests(self._download, [url, ], self._callback)
    [self.threadPool.putRequest(req, timeout=1) for req in reqs]
</code></pre>
<pre><code class="Python"># 直接用requests模块完成图片的下载，并保存到文件
def _download(self, url):
    if self.is_alive():
        r = requests.request(&#39;GET&#39;, url)
        if r:
            filename = os.path.join(self.save_directory, os.path.basename(url))  # 拼接文件名
            if not os.path.exists(filename):
                with open(filename, &#39;wb&#39;) as f:
                    f.write(r.content)  # 保存图片
                return 1
            else:
                return -1
    else:
        return None
</code></pre>
<h3 id="速度还不错"><a href="#速度还不错" class="headerlink" title="速度还不错"></a>速度还不错</h3><p>　<br><img src="/2016/04/23/2016-04-23-如何用Python快速撸出一个贴吧图片下载器/tiebaImageGet-010.png" title="resImghere"></p>
<h3 id="END"><a href="#END" class="headerlink" title="END"></a>END</h3><p>到这里其实关键的部分也就结束了，剩下的一些微小的工作，比如输出统计结果（下了多少图，用了多少时间，支持设置保存目录。。。），各位看官感兴趣的话可以直接去我的Github上看源码。</p>
<p>Github <a href="https://github.com/zhaohui8969/tiebaImageGet" target="_blank" rel="noopener">https://github.com/zhaohui8969/tiebaImageGet</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 贴吧 </tag>
            
            <tag> Image </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在OSX上用automator实现VPN断线自动重连]]></title>
      <url>/2016/02/23/2016-02-23-%E5%9C%A8OSX%E4%B8%8A%E7%94%A8automator%E5%AE%9E%E7%8E%B0VPN%E6%96%AD%E7%BA%BF%E8%87%AA%E5%8A%A8%E9%87%8D%E8%BF%9E/</url>
      <content type="html"><![CDATA[<p>　　由于某些原因，平时需要使用到VPN，但是和这个服务器之间的链路呢总是有些不稳定，经常会断掉，然而OSX网络设置面板没有找到自动重播的选项，而且有时这个连接只是假死，就是还显示状态是连接上的，但是就是没有流量，得重播。可是手工去重播的话很麻烦，之前有试过在路由器上写过python脚本来实现链路连通状况检测自动重播的脚本，不过后来呢，那个路由器退役了，现在在OSX平台下想寻找到类似的解决办法，Google了解到OSX下有automator这样的神器。倒腾了一会解决了问题，在这里记录下来。</p>
<p>　　首先打开automator，他是这个样子的：　　</p>
<img src="/2016/02/23/2016-02-23-在OSX上用automator实现VPN断线自动重连/l2bf-010.png" title="img1">
<p>然后我们要制作一个应用程序，就像这样：</p>
<img src="/2016/02/23/2016-02-23-在OSX上用automator实现VPN断线自动重连/l2bf-020.png" title="img2">
<p>在“资料库”中选择“实用工具”分栏，找到“运行 AppleScript”这个东西，拖到右边，然后我们的代码编辑区就出现了，之后的所有代码都写在这里：</p>
<img src="/2016/02/23/2016-02-23-在OSX上用automator实现VPN断线自动重连/l2bf-030.png" title="img3">
<p>然后想想我需要实现什么，首先需要实现控制VPN连接的动作，Google到相关的资料，代码如下</p>
<pre><code class="python">tell application &quot;System Events&quot;
    tell network preferences
        disconnect service &quot;L2BF&quot;
        connect service &quot;L2BF&quot;
    end tell
end tell
</code></pre>
<p>这段意思呢就是告诉”System Events模块”（我叫他模块，不知道对不对）里面的”network preferences模块”：我要断开一个叫L2BF的连接，然后重连一下，这里测试结果没有问题。</p>
<p>那么下一个部分就是网络的状态监测部分，这里呢我想到的最简单的办法就是用ping命令检测，然后我就找到一个在AppleScript里运行python程序的办法，代码如下：</p>
<pre><code class="python">do shell script &quot;ping -c 1 -W 3000 baidu.com&quot;
</code></pre>
<p>这样就完成了一条python”语句.”执行，对baidu.com发一个ping包，3000秒超时。然后就是关于逻辑判断的部分了，找到了这些我需要的部分:</p>
<h3 id="Try-catch语句"><a href="#Try-catch语句" class="headerlink" title="Try catch语句"></a>Try catch语句</h3><pre><code class="python">try
    {&quot;语句.&quot;}
on error
    {&quot;语句.&quot;}
end try
</code></pre>
<h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><pre><code class="python">repeat
    {&quot;语句.&quot;}
end repeat
</code></pre>
<p>当然，这里也可以有循环附加条件，比如这样：</p>
<pre><code class="python">repeat 2 times
repeat with counter from 1 to 3
repeat while counter ≠ 10
repeat until counter = 10
repeat with 单个元素 in 集合
</code></pre>
<h3 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h3><p>也就类似这样</p>
<pre><code class="python">if flag = 0 then
    {&quot;语句.&quot;}
else if flag = -1 then
    {&quot;语句.&quot;}
end if
</code></pre>
<h3 id="变量什么的"><a href="#变量什么的" class="headerlink" title="变量什么的"></a>变量什么的</h3><pre><code class="python">set flag to 0
</code></pre>
<p>然后代码就这样写出来了：</p>
<pre><code class="python">on run {input, parameters}

    set flag to 0
    repeat
        try
            do shell script &quot;ping -c 1 -W 3000 baidu.com&quot;
            delay 30
        on error
            beep
            tell application &quot;System Events&quot;
                tell network preferences
                    disconnect service &quot;L2BF&quot;
                    connect service &quot;L2BF&quot;
                end tell
            end tell
            delay 5
        end try
    end repeat

    return input
end run
</code></pre>
<p>每隔30秒检测一下连通性，出现问题就重拨一下，看起来很不错，点一下这个按钮测试一下：</p>
<p>结果很不错，至少我把连接断掉他能自动给我连上。到这里就功德圆满了吗？不不不，在查找资料的过程中我看到了这个逼格很高的东西，有人在代码里写了一句这个:</p>
<pre><code class="python">say &quot;Good~&quot;
</code></pre>
<p>我也试了一下，当时就懵逼了，这还能语音说话。。。然后就打算提高一下这个程序的逼格，加入语音的部分，还去系统语音里面选了一个不错的女声Vicki：</p>
<p>加了语音和提示音后的程序代码：</p>
<pre><code class="python">on run {input, parameters}

    say &quot;Demon started.&quot;
    set flag to 0
    repeat
        try
            do shell script &quot;ping -c 1 -W 3000 baidu.com&quot;
            if flag = 0 then
                say &quot;Connected.&quot;
            else if flag = -1 then
                say &quot;Reconnected!&quot;
            end if
            set flag to 1
            delay 10
        on error
            beep
            set flag to -1
            say &quot;Connection error! Try reconnect...&quot;
            tell application &quot;System Events&quot;
                tell network preferences
                    disconnect service &quot;L2BF&quot;
                    connect service &quot;L2BF&quot;
                end tell
            end tell
            delay 5
        end try
    end repeat

    return input
end run
</code></pre>
<p>运行之后还有语音提示，666.</p>
<h3 id="标准结局"><a href="#标准结局" class="headerlink" title="标准结局"></a>标准结局</h3><p>Good！然后在Spotlight里搜索程序便可以直接打开：</p>
<img src="/2016/02/23/2016-02-23-在OSX上用automator实现VPN断线自动重连/l2bf-040.png" title="img4">
<p>运行之后在顶栏会有这样一个小齿轮，点击可以选择退出：</p>
<img src="/2016/02/23/2016-02-23-在OSX上用automator实现VPN断线自动重连/l2bf-050.png" title="img5">
<p>最后附上一些资料站：</p>
<ul>
<li><a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html" target="_blank" rel="noopener">AppleScript Language Guide</a></li>
<li><a href="https://developer.apple.com/search/" target="_blank" rel="noopener">https://developer.apple.com/search/</a></li>
</ul>
<p>Over</p>
]]></content>
      
        
        <tags>
            
            <tag> Automator </tag>
            
            <tag> OSX </tag>
            
        </tags>
        
    </entry>
    
  
  
    
  
</search>
